# uniride_full_mvp.py
# UniRide: –£—Ä–§–£ –ö–∞—Ä—à–µ—Ä–∏–Ω–≥ - Geli≈ütirilmi≈ü MVP
# Gereksinim: pip install pytelegrambotapi
# √áalƒ±≈ütƒ±rma: python3 uniride_full_mvp.py

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
import sqlite3
import logging
from datetime import datetime, timezone

# ------------- AYARLAR -------------
API_TOKEN = "7985856741:AAGiFZXqon-VsxM0nZigx9HLGKD-c6eF0QQ"
DB_PATH = "uniride_full_mvp.sqlite"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(API_TOKEN)
user_states = {}  # ge√ßici dialog durumlarƒ± user_id -> dict

# ------------- DB SETUP -------------
def setup_database():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()

    c.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        full_name TEXT,
        telegram_username TEXT,
        role TEXT,
        urfu_status INTEGER DEFAULT 0,
        sex TEXT,
        preferences TEXT,
        car_make TEXT,
        car_color TEXT,
        car_plate TEXT,
        verified INTEGER DEFAULT 0,
        created_at TEXT
    )
    ''')

    c.execute('''
    CREATE TABLE IF NOT EXISTS ride_offers (
        offer_id INTEGER PRIMARY KEY AUTOINCREMENT,
        driver_id INTEGER,
        start_point TEXT,
        end_point TEXT,
        date TEXT,
        time TEXT,
        seats INTEGER,
        price REAL,
        preferences TEXT,
        active INTEGER DEFAULT 1,
        created_at TEXT
    )
    ''')

    c.execute('''
    CREATE TABLE IF NOT EXISTS requests (
        request_id INTEGER PRIMARY KEY AUTOINCREMENT,
        passenger_id INTEGER,
        start_point TEXT,
        end_point TEXT,
        date TEXT,
        time TEXT,
        preferences TEXT,
        active INTEGER DEFAULT 1,
        created_at TEXT
    )
    ''')

    c.execute('''
    CREATE TABLE IF NOT EXISTS likes (
        like_id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_user INTEGER,
        to_user INTEGER,
        offer_id INTEGER,
        request_id INTEGER,
        created_at TEXT
    )
    ''')

    c.execute('''
    CREATE TABLE IF NOT EXISTS matches (
        match_id INTEGER PRIMARY KEY AUTOINCREMENT,
        driver_id INTEGER,
        passenger_id INTEGER,
        offer_id INTEGER,
        request_id INTEGER,
        created_at TEXT,
        active INTEGER DEFAULT 1
    )
    ''')

    c.execute('''
    CREATE TABLE IF NOT EXISTS chat_messages (
        msg_id INTEGER PRIMARY KEY AUTOINCREMENT,
        match_id INTEGER,
        from_user INTEGER,
        text TEXT,
        created_at TEXT
    )
    ''')

    conn.commit()
    conn.close()

setup_database()

# ------------- Yardƒ±mcƒ±lar -------------
def now_str():
    # timezone-aware UTC ISO string (deprecation uyarƒ±sƒ± i√ßin d√ºzeltme)
    return datetime.now(timezone.utc).isoformat()

def db_execute(query, params=(), fetchone=False, fetchall=False, commit=False):
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute(query, params)
    res = None
    if fetchone:
        res = c.fetchone()
    elif fetchall:
        res = c.fetchall()
    if commit:
        conn.commit()
    conn.close()
    return res

def escape_html(text):
    if text is None:
        return ""
    return str(text).replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

# Klavyeler
def get_urfu_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–î–∞", callback_data="urfu_yes"),
           InlineKeyboardButton("–ù–µ—Ç", callback_data="urfu_no"))
    return kb

def get_role_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–í–æ–¥–∏—Ç–µ–ª—å", callback_data="role_driver"),
           InlineKeyboardButton("–ü–∞—Å—Å–∞–∂–∏—Ä", callback_data="role_passenger"))
    return kb

def get_gender_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data="sex_male"),
           InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data="sex_female"),
           InlineKeyboardButton("–ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å", callback_data="sex_none"))
    return kb

def get_pref_keyboard():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–ù–µ–∫—É—Ä—è—â–∏–π —Å–∞–ª–æ–Ω", callback_data="pref_nonsmoke"),
           InlineKeyboardButton("–õ—é–±–ª—é –º—É–∑—ã–∫—É", callback_data="pref_music"),
           InlineKeyboardButton("–¢–∏—Ö–∞—è –ø–æ–µ–∑–¥–∫–∞", callback_data="pref_quiet"))
    kb.add(InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="pref_done"))
    return kb

def get_main_menu(role):
    kb = InlineKeyboardMarkup()
    kb.row_width = 1
    if role == '–í–æ–¥–∏—Ç–µ–ª—å':
        kb.add(InlineKeyboardButton("üöó –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="offer_ride"))
        kb.add(InlineKeyboardButton("üîé –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", callback_data="view_passengers"))
        kb.add(InlineKeyboardButton("üßæ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"))
        kb.add(InlineKeyboardButton("üöò –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="add_car"))
    else:
        kb.add(InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –ø–æ–µ–∑–¥–∫—É", callback_data="request_ride"))
        kb.add(InlineKeyboardButton("üöó –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="view_drivers"))
        kb.add(InlineKeyboardButton("üßæ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="show_profile"))
    return kb

# ------------- Komutlar -------------
@bot.message_handler(commands=['start'])
def cmd_start(message):
    user_id = message.from_user.id
    user_states.pop(user_id, None)
    user_states[user_id] = {'step': 'started'}
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ UniRide –£—Ä–§–£ –ö–∞—Ä—à–µ—Ä–∏–Ω–≥.\n–í—ã —Å—Ç—É–¥–µ–Ω—Ç –£—Ä–§–£?",
                     reply_markup=get_urfu_keyboard())

@bot.callback_query_handler(func=lambda c: c.data.startswith('urfu_'))
def cb_urfu(call):
    user_id = call.from_user.id
    try:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    except Exception:
        pass

    if call.data == 'urfu_yes':
        # init temporary state
        user_states[user_id] = {'step': 'await_role', 'urfu_status': 1}
        bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=get_role_keyboard())
    else:
        bot.send_message(call.message.chat.id, "–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –£—Ä–§–£. –°–ø–∞—Å–∏–±–æ!")
        user_states.pop(user_id, None)

@bot.callback_query_handler(func=lambda c: c.data.startswith('role_'))
def cb_role(call):
    user_id = call.from_user.id
    st = user_states.get(user_id)
    if not st:
        bot.send_message(call.message.chat.id, "–û—à–∏–±–∫–∞ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return
    try:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    except Exception:
        pass

    role = '–í–æ–¥–∏—Ç–µ–ª—å' if call.data == 'role_driver' else '–ü–∞—Å—Å–∞–∂–∏—Ä'
    # save basic user entry (UPSERT)
    db_execute('''
        INSERT INTO users (user_id, full_name, telegram_username, role, urfu_status, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            full_name=excluded.full_name,
            telegram_username=excluded.telegram_username,
            role=excluded.role,
            urfu_status=excluded.urfu_status
    ''', (user_id, call.from_user.first_name or '', call.from_user.username or '', role, st.get('urfu_status', 1), now_str()), commit=True)

    # continue registration: ask gender
    user_states[user_id] = {'step': 'await_gender', 'role': role}
    bot.send_message(call.message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª (—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏ –º—ç—Ç—á–∏–Ω–≥–µ):", reply_markup=get_gender_keyboard())

@bot.callback_query_handler(func=lambda c: c.data.startswith('sex_'))
def cb_sex(call):
    user_id = call.from_user.id
    st = user_states.get(user_id)
    if not st:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return
    sex_map = {'sex_male': '–ú—É–∂—á–∏–Ω–∞', 'sex_female': '–ñ–µ–Ω—â–∏–Ω–∞', 'sex_none': None}
    sex = sex_map.get(call.data)
    # update DB
    db_execute('UPDATE users SET sex=? WHERE user_id=?', (sex, user_id), commit=True)
    st['sex'] = sex
    st['step'] = 'await_prefs'
    try:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    except Exception:
        pass
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ù–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ.", reply_markup=get_pref_keyboard())

@bot.callback_query_handler(func=lambda c: c.data.startswith('pref_'))
def cb_pref(call):
    user_id = call.from_user.id
    st = user_states.get(user_id)
    if not st:
        bot.answer_callback_query(call.id, "–ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return
    if call.data == 'pref_done':
        # persist preferences (if any)
        prefs = st.get('prefs', [])
        prefs_text = "; ".join(prefs) if prefs else None
        db_execute('UPDATE users SET preferences=? WHERE user_id=?', (prefs_text, user_id), commit=True)
        # if driver, ask car info, else finish registration
        role = db_execute('SELECT role FROM users WHERE user_id=?', (user_id,), fetchone=True)
        role = role[0] if role else None
        user_states.pop(user_id, None)
        bot.send_message(call.message.chat.id, "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–æ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu(role))
        return
    # add pref
    map_pref = {
        'pref_nonsmoke': '–ù–µ–∫—É—Ä—è—â–∏–π —Å–∞–ª–æ–Ω',
        'pref_music': '–õ—é–±–ª—é –º—É–∑—ã–∫—É',
        'pref_quiet': '–¢–∏—Ö–∞—è –ø–æ–µ–∑–¥–∫–∞'
    }
    pref_text = map_pref.get(call.data)
    if pref_text:
        prefs = st.get('prefs', [])
        if pref_text not in prefs:
            prefs.append(pref_text)
        st['prefs'] = prefs
        bot.answer_callback_query(call.id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {pref_text}")
    else:
        bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è")

# ------------- Profile / Edit -------------
@bot.callback_query_handler(func=lambda c: c.data == 'show_profile')
def cb_show_profile(call):
    user_id = call.from_user.id
    row = db_execute('SELECT full_name, role, urfu_status, sex, preferences, car_make, car_color, car_plate, verified FROM users WHERE user_id=?', (user_id,), fetchone=True)
    if not row:
        bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å /start.")
        return
    full_name, role, urfu, sex, prefs, car_make, car_color, car_plate, verified = row
    text = f"<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n–ò–º—è: {escape_html(full_name)}\n–†–æ–ª—å: {escape_html(role)}\n–£—Ä–§–£: {'–î–∞' if urfu else '–ù–µ—Ç'}\n–ü–æ–ª: {escape_html(sex) if sex else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {escape_html(prefs) if prefs else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}\n–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if verified else '–ù–µ—Ç'}"
    if role == '–í–æ–¥–∏—Ç–µ–ª—å':
        text += f"\n\n<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å</b>\n–ú–∞—Ä–∫–∞/–º–æ–¥–µ–ª—å: {escape_html(car_make) if car_make else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n–¶–≤–µ—Ç: {escape_html(car_color) if car_color else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n–ì–æ—Å. –Ω–æ–º–µ—Ä: {escape_html(car_plate) if car_plate else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"))
    if role == '–í–æ–¥–∏—Ç–µ–ª—å':
        kb.add(InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="edit_car"))
    kb.add(InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å", callback_data="change_role"))
    try:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    except Exception:
        pass
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'edit_profile')
def cb_edit_profile(call):
    user_id = call.from_user.id
    user_states[user_id] = {'step': 'edit_full_name'}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã):")

@bot.callback_query_handler(func=lambda c: c.data == 'edit_car')
def cb_edit_car(call):
    user_id = call.from_user.id
    user_states[user_id] = {'step': 'add_car_make'}
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: Ford Focus):")

@bot.callback_query_handler(func=lambda c: c.data == 'change_role')
def cb_change_role(call):
    user_id = call.from_user.id
    try:
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, None)
    except Exception:
        pass
    user_states[user_id] = {'step': 'await_role_change'}
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:", reply_markup=get_role_keyboard())

# ------------- Offer / Request flows (driver/passenger) -------------
@bot.callback_query_handler(func=lambda c: c.data == 'offer_ride')
def cb_offer_ride(call):
    user_id = call.from_user.id
    role_row = db_execute('SELECT role FROM users WHERE user_id=?', (user_id,), fetchone=True)
    if not role_row or role_row[0] != '–í–æ–¥–∏—Ç–µ–ª—å':
        bot.answer_callback_query(call.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.")
        return
    user_states[user_id] = {'step': 'offer_start'}
    bot.send_message(call.message.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –û—Ç–∫—É–¥–∞ –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å? (–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ—Ä–ø—É—Å):")

@bot.callback_query_handler(func=lambda c: c.data == 'request_ride')
def cb_request_ride(call):
    user_id = call.from_user.id
    role_row = db_execute('SELECT role FROM users WHERE user_id=?', (user_id,), fetchone=True)
    if not role_row or role_row[0] != '–ü–∞—Å—Å–∞–∂–∏—Ä':
        bot.answer_callback_query(call.id, "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º.")
        return
    user_states[user_id] = {'step': 'request_start'}
    bot.send_message(call.message.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞. –û—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ—Ä–ø—É—Å):")

# ------------- View drivers/passengers (swipe) basic -------------
@bot.callback_query_handler(func=lambda c: c.data == 'view_drivers')
def cb_view_drivers(call):
    user_id = call.from_user.id
    row = db_execute('SELECT role FROM users WHERE user_id=?', (user_id,), fetchone=True)
    if not row or row[0] != '–ü–∞—Å—Å–∞–∂–∏—Ä':
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –ø–∞—Å—Å–∞–∂–∏—Ä—ã.")
        return
    offers = db_execute('SELECT offer_id, driver_id, start_point, end_point, date, time, seats, price, preferences FROM ride_offers WHERE active=1 AND driver_id<>? ORDER BY created_at DESC', (user_id,), fetchall=True)
    if not offers:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        return
    # show first card
    offer = offers[0]
    offer_id, driver_id, start_point, end_point, date_s, time_s, seats, price, prefs = offer
    d = db_execute('SELECT full_name, car_make, car_color FROM users WHERE user_id=?', (driver_id,), fetchone=True)
    name = d[0] if d else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
    car = f"{d[1]} ({d[2]})" if d and d[1] else '–ê–≤—Ç–æ: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
    text = f"<b>{escape_html(name)}</b>\n{escape_html(car)}\n–û—Ç–∫—É–¥–∞: {escape_html(start_point)}\n–ö—É–¥–∞: {escape_html(end_point)}\n–î–∞—Ç–∞: {escape_html(date_s)} {escape_html(time_s)}\n–¶–µ–Ω–∞: {price} —Ä—É–±. –ú–µ—Å—Ç–∞: {seats}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {escape_html(prefs) if prefs else '–ù–µ—Ç'}"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üëç –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data=f"like_offer:{offer_id}:{driver_id}"),
           InlineKeyboardButton("üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data=f"dislike_offer:{offer_id}:{driver_id}"))
    kb.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="swipe_next"))
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=kb)

@bot.callback_query_handler(func=lambda c: c.data == 'view_passengers')
def cb_view_passengers(call):
    user_id = call.from_user.id
    row = db_execute('SELECT role FROM users WHERE user_id=?', (user_id,), fetchone=True)
    if not row or row[0] != '–í–æ–¥–∏—Ç–µ–ª—å':
        bot.answer_callback_query(call.id, "–¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏.")
        return
    requests = db_execute('SELECT request_id, passenger_id, start_point, end_point, date, time, preferences FROM requests WHERE active=1 AND passenger_id<>? ORDER BY created_at DESC', (user_id,), fetchall=True)
    if not requests:
        bot.send_message(call.message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.")
        return
    req = requests[0]
    request_id, passenger_id, start_point, end_point, date_s, time_s, prefs = req
    p = db_execute('SELECT full_name FROM users WHERE user_id=?', (passenger_id,), fetchone=True)
    name = p[0] if p else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'
    text = f"<b>{escape_html(name)}</b>\n–û—Ç–∫—É–¥–∞: {escape_html(start_point)}\n–ö—É–¥–∞: {escape_html(end_point)}\n–î–∞—Ç–∞: {escape_html(date_s)} {escape_html(time_s)}\n–ü–æ–∂–µ–ª–∞–Ω–∏—è: {escape_html(prefs) if prefs else '–ù–µ—Ç'}"
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üëç –ü–æ–¥—Ö–æ–¥–∏—Ç", callback_data=f"like_request:{request_id}:{passenger_id}"),
           InlineKeyboardButton("üëé –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data=f"dislike_request:{request_id}:{passenger_id}"))
    kb.add(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data="swipe_next"))
    bot.send_message(call.message.chat.id, text, parse_mode='HTML', reply_markup=kb)

# ------------- Like / swipe handlers (simplified) -------------
@bot.callback_query_handler(func=lambda c: c.data.startswith('like_offer:') or c.data.startswith('like_request:') or c.data in ('swipe_next','dislike_offer','dislike_request'))
def cb_swipe_actions(call):
    # For MVP: store like and check reciprocal (very simplified)
    user_id = call.from_user.id
    data = call.data
    try:
        if data.startswith('like_offer:'):
            _, offer_id, driver_id = data.split(':')
            db_execute('INSERT INTO likes (from_user, to_user, offer_id, created_at) VALUES (?, ?, ?, ?)', (user_id, int(driver_id), int(offer_id), now_str()), commit=True)
            bot.answer_callback_query(call.id, "–í—ã –ª–∞–π–∫–Ω—É–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è.")
        elif data.startswith('like_request:'):
            _, request_id, passenger_id = data.split(':')
            db_execute('INSERT INTO likes (from_user, to_user, request_id, created_at) VALUES (?, ?, ?, ?)', (user_id, int(passenger_id), int(request_id), now_str()), commit=True)
            bot.answer_callback_query(call.id, "–í—ã –ª–∞–π–∫–Ω—É–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–∞—Å—Å–∞–∂–∏—Ä–∞.")
        elif data == 'swipe_next':
            bot.answer_callback_query(call.id, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ‚Äî —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª MVP —É–ø—Ä–æ—â–µ–Ω.")
        else:
            bot.answer_callback_query(call.id, "–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ.")
    except Exception as e:
        logger.exception("Swipe action failed: %s", e)
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

# ------------- Metin mesaj handler (conversation flows) -------------
@bot.message_handler(func=lambda m: True)
def catch_all(message):
    user_id = message.from_user.id
    text = message.text.strip() if message.text else ""

    # CANCEL helper
    if text == '/cancel':
        user_states.pop(user_id, None)
        bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    st = user_states.get(user_id)
    if not st:
        bot.send_message(message.chat.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        return

    step = st.get('step')

    # Registration edit flows
    if step == 'edit_full_name':
        new_name = text
        db_execute('UPDATE users SET full_name=? WHERE user_id=?', (new_name, user_id), commit=True)
        bot.send_message(message.chat.id, "–ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
        user_states.pop(user_id, None)
        return

    # Car edit
    if step == 'add_car_make':
        st['car_make'] = text
        st['step'] = 'add_car_color'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
        return
    if step == 'add_car_color':
        st['car_color'] = text
        st['step'] = 'add_car_plate'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä (–∏–ª–∏ '–ù–µ—Ç'):")
        return
    if step == 'add_car_plate':
        plate = None if text.lower() in ('–Ω–µ—Ç','no') else text
        db_execute('UPDATE users SET car_make=?, car_color=?, car_plate=? WHERE user_id=?', (st.get('car_make'), st.get('car_color'), plate, user_id), commit=True)
        bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
        user_states.pop(user_id, None)
        return

    # Role change flow: after pressing change_role, user chooses role with same callback; expect role change to update DB and ask for gender/prefs again
    if step == 'await_role_change':
        # user should press inline button, but allow typing 'driver'/'passenger' as fallback
        chosen = None
        if text.lower().startswith('–≤'):
            chosen = '–í–æ–¥–∏—Ç–µ–ª—å'
        elif text.lower().startswith('–ø'):
            chosen = '–ü–∞—Å—Å–∞–∂–∏—Ä'
        if chosen:
            db_execute('UPDATE users SET role=? WHERE user_id=?', (chosen, user_id), commit=True)
            user_states.pop(user_id, None)
            bot.send_message(message.chat.id, f"–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {chosen}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_menu(chosen))
        else:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏.")
        return

    # Offer (driver) creation flow
    if step == 'offer_start':
        st['start_point'] = text
        st['step'] = 'offer_end'
        bot.send_message(message.chat.id, "–ö—É–¥–∞ –≤—ã –ø–æ–µ–¥–µ—Ç–µ? (–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ—Ä–ø—É—Å):")
        return
    if step == 'offer_end':
        st['end_point'] = text
        st['step'] = 'offer_date'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (YYYY-MM-DD):")
        return
    if step == 'offer_date':
        st['date'] = text
        st['step'] = 'offer_time'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):")
        return
    if step == 'offer_time':
        st['time'] = text
        st['step'] = 'offer_seats'
        bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç?")
        return
    if step == 'offer_seats':
        try:
            seats = int(text)
            st['seats'] = seats
            st['step'] = 'offer_price'
            bot.send_message(message.chat.id, "–¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ –º–µ—Å—Ç–æ (0 –µ—Å–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ):")
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏.")
        return
    if step == 'offer_price':
        try:
            price = float(text)
            st['price'] = price
            st['step'] = 'offer_prefs'
            bot.send_message(message.chat.id, "–ö—Ä–∞—Ç–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–ø—É—Ç—á–∏–∫–∞–º (–∏–ª–∏ '–ù–µ—Ç'):")
        except ValueError:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 150).")
        return
    if step == 'offer_prefs':
        prefs = None if text.lower() in ('–Ω–µ—Ç','no') else text
        db_execute('''
            INSERT INTO ride_offers (driver_id, start_point, end_point, date, time, seats, price, preferences, created_at, active)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 1)
        ''', (user_id, st.get('start_point'), st.get('end_point'), st.get('date'), st.get('time'), st.get('seats'), st.get('price'), prefs, now_str()), commit=True)
        bot.send_message(message.chat.id, "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞–º.")
        user_states.pop(user_id, None)
        return

    # Request (passenger) creation flow
    if step == 'request_start':
        st['start_point'] = text
        st['step'] = 'request_end'
        bot.send_message(message.chat.id, "–ö—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–µ—Ö–∞—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ—Ä–ø—É—Å):")
        return
    if step == 'request_end':
        st['end_point'] = text
        st['step'] = 'request_date'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ–µ–∑–¥–∫–∏ (YYYY-MM-DD):")
        return
    if step == 'request_date':
        st['date'] = text
        st['step'] = 'request_time'
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (HH:MM):")
        return
    if step == 'request_time':
        st['time'] = text
        st['step'] = 'request_prefs'
        bot.send_message(message.chat.id, "–ö—Ä–∞—Ç–∫–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –≤–æ–¥–∏—Ç–µ–ª—é (–∏–ª–∏ '–ù–µ—Ç'):")
        return
    if step == 'request_prefs':
        prefs = None if text.lower() in ('–Ω–µ—Ç','no') else text
        db_execute('''
            INSERT INTO requests (passenger_id, start_point, end_point, date, time, preferences, created_at, active)
            VALUES (?, ?, ?, ?, ?, ?, ?, 1)
        ''', (user_id, st.get('start_point'), st.get('end_point'), st.get('date'), st.get('time'), prefs, now_str()), commit=True)
        bot.send_message(message.chat.id, "‚úÖ –ó–∞–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ú—ã —É–≤–µ–¥–æ–º–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π (MVP: –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ).")
        # notify drivers (simple exact match)
        notify_drivers_of_request(user_id, st.get('start_point'), st.get('end_point'), st.get('date'), st.get('time'))
        user_states.pop(user_id, None)
        return

    # If nothing matched
    bot.send_message(message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –∏–ª–∏ —à–∞–≥ –∏—Å—Ç—ë–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

# ------------- Notifier (simplified matching) -------------
def notify_drivers_of_request(passenger_id, start_point, end_point, date, time_s):
    offers = db_execute('SELECT driver_id, offer_id FROM ride_offers WHERE start_point=? AND end_point=? AND date=? AND active=1', (start_point, end_point, date), fetchall=True)
    if not offers:
        return
    passenger = db_execute('SELECT full_name, telegram_username FROM users WHERE user_id=?', (passenger_id,), fetchone=True)
    pname = passenger[0] if passenger else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
    pusername = passenger[1] if passenger and passenger[1] else ''
    txt = f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:</b>\n–û—Ç–∫—É–¥–∞: {escape_html(start_point)}\n–ö—É–¥–∞: {escape_html(end_point)}\n–î–∞—Ç–∞: {escape_html(date)} {escape_html(time_s)}\n–ü–∞—Å—Å–∞–∂–∏—Ä: {escape_html(pname)} @{escape_html(pusername)}"
    for d in offers:
        driver_id = d[0]
        try:
            bot.send_message(driver_id, txt, parse_mode='HTML')
        except Exception:
            pass

# ------------- Start polling -------------
if __name__ == "__main__":
    print("Bot starting...")
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        logger.exception("Polling error: %s", e)